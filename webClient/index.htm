<html>

<head>
    <meta charset="UTF-8">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-BmbxuPwQa2lc/FVzBcNJ7UAyJxM6wuqIj61tLrc4wSX0szH/Ev+nYRRuWlolflfl" crossorigin="anonymous">

    <link rel="stylesheet" href="ol.css" type="text/css">

    <link rel="stylesheet" href="style.css" type="text/css">

    <script type='application/javascript'
        src='https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js'></script>
    <script type='application/javascript' src="ol.js"></script>
    <script type='application/javascript'>
        var websocket = 'ws://127.0.0.1:9000/ws';
        var isopen = false;

        var jsonData;
        var nodeList = [];

        var lat = 45.07;
        var lon = 7.51;
        var z = 10;

        var icon = "http://www.openstreetmap.org/openlayers/img/marker.png";
        var iconFeatures = [];
        var vectorSource = new ol.source.Vector({
            features: iconFeatures //add an array of features
        });

        var vectorLayer = new ol.layer.Vector({
            source: vectorSource,
        });

        function addMarker(lon, lat, icon, txt) {
            var iconStyle = new ol.style.Style({
                image: new ol.style.Icon(/** @type {olx.style.IconOptions} */({
                    anchor: [0.5, 46],
                    anchorXUnits: 'fraction',
                    anchorYUnits: 'pixels',
                    opacity: 0.95,
                    src: icon
                })),
                text: new ol.style.Text({
                    text: "the label",
                    fill: new ol.style.Fill({ color: 'black' }),
                    stroke: new ol.style.Stroke({ color: 'white', width: 1 }),
                    font: 'bold 12px Arial, Verdana, Helvetica, sans-serif',
                    offsetX: 0,
                    offsetY: -60
                })
            });
            var iconGeometry = new ol.geom.Point(ol.proj.transform([lon, lat], 'EPSG:4326', 'EPSG:3857'));
            var iconFeature = new ol.Feature({
                geometry: iconGeometry,
            });
            iconStyle.getText().setText(txt);
            iconFeature.setStyle(iconStyle);
            iconFeatures.push(iconFeature);
        }

        function mapInit() {
            var map = new ol.Map({
                target: 'map',
                layers: [
                    new ol.layer.Tile({
                        source: new ol.source.OSM()
                    })
                ],
                view: new ol.View({
                    center: ol.proj.fromLonLat([lon, lat]),
                    zoom: z
                })
            });
            map.addLayer(vectorLayer);
        }

        function writeConsole(txt) {
            $('#console').val($('#console').val() + txt + '\n');
            $('#console').scrollTop($('#console')[0].scrollHeight);
        }

        function toAll() {
            $('#toMsg').val("^all");
        }
        function toTarget(id) {
            $('#toMsg').val(id);
        }

        function searchList(nameKey, myArray) {
            for (var i = 0; i < myArray.length; i++) {
                if (myArray[i].name === nameKey) {
                    return myArray[i];
                }
            }
        }


        function connectWS() {
            websocket = 'ws://' + $('#IPaddr').val() + ':' + $('#srvPort').val() + '/ws';
            if (window.WebSocket) {
                ws = new WebSocket(websocket);
            }
            else if (window.MozWebSocket) {
                ws = MozWebSocket(websocket);
            }
            else {
                console.log('WebSocket Not Supported');
                return;
            }
            ws.binaryType = "arraybuffer";

            ws.onopen = function () {
                console.log("Connected!");
                isopen = true;
                $('#statusIcon').removeClass('red');
                $('#statusIcon').addClass('blue');
            }

            ws.onmessage = function (evt) {
                writeConsole(evt.data);
                jsonData = JSON.parse(evt.data)

                nodeList = [];
                for (let [key, value] of Object.entries(jsonData.nodes)) {
                    if (jsonData.myNode.user.id == value.user.id)
                        continue;
                    if (value.position) {
                        var lat = value.position.latitude;
                        var lon = value.position.longitude;
                        var alt = value.position.altitude;
                        var batt = value.position.batteryLevel;
                        var time = value.position.time;
                    }
                    else {
                        var lat = NaN;
                        var lon = NaN;
                        var alt = NaN;
                        var batt = NaN;
                        var time = NaN;
                    }
                    nodeList.push({
                        "id": key,
                        "user": value.user.longName,
                        "pos": {
                            "lat": parseFloat(lat).toFixed(4),
                            "lon": parseFloat(lon).toFixed(4),
                            "alt": parseInt(alt)
                        },
                        "snr": parseFloat(value.snr),
                        "batt": parseInt(batt),
                        "lh": time
                    });
                }

                nodeList.sort((a, b) => {
                    // two undefined values should be treated as equal ( 0 )
                    if (typeof a.lh === 'undefined' && typeof b.lh === 'undefined')
                        return 0;
                    // if a is undefined and b isn't a should have a lower index in the array
                    else if (typeof a.lh === 'undefined')
                        return 1;
                    // if b is undefined and a isn't a should have a higher index in the array
                    else if (typeof b.lh === 'undefined')
                        return -1;
                    // if both lhs are defined compare as normal
                    else
                        return b.lh - a.lh;
                });




                $("#myNodeTable tbody").empty();
                $("#myNodeTable tbody").append("<tr><td><b>User:</b></td><td>" + jsonData.myNode.user.longName + "</td></tr>");
                $("#myNodeTable tbody").append("<tr><td><b>Id:</b></td><td>" + jsonData.myNode.user.id + "</td></tr>");
                if (jsonData.myNode.position.latitude) {
                    $("#myNodeTable tbody").append("<tr><td><b>Position:</b></td><td>" +
                        /*      parseFloat(jsonData.myNode.position.latitude).toFixed(4) + " 째, " +
                              parseFloat(jsonData.myNode.position.longitude).toFixed(4) + " 째, " +
                              parseInt(jsonData.myNode.position.altitude) + " m, " +*/
                        "</td></tr>");
                }
                else {
                    $("#myNodeTable tbody").append("<tr><td><b>Position:</b></td><td></td></tr>");
                }
                if (jsonData.myNode.position.batteryLevel) {
                    $("#myNodeTable tbody").append("<tr><td><b>Battery:</b></td><td>" + jsonData.myNode.position.batteryLevel + "</td></tr>");
                }
                else {
                    $("#myNodeTable tbody").append("<tr><td><b>Battery:</b></td><td></td></tr>");
                }


                //Nodes Table
                $('#nodes').val("");
                iconFeatures = []
                vectorSource.clear()
                $("#nodesTable tbody").empty();
                nodeList.forEach(element => {
                    var elePos = "";
                    var eleBatt = "";
                    var eleLh = "";
                    if (!isNaN(element.lh))
                        eleLh = new Date(element.lh * 1000).toLocaleString();
                    else
                        eleLh = "";

                    if (isNaN(element.pos.lat)) {
                        elePos = "";
                    }
                    else {
                        elePos = element.pos.lat + "째, " + element.pos.lon + "째, " + element.pos.alt + " m";
                        var createIcon = addMarker(element.pos.lon, element.pos.lat, icon, element.user);
                        //markerObj[element.id] = 
                    }

                    if (isNaN(element.batt))
                        eleBatt = "";
                    else
                        eleBatt = element.batt + "&#37;";

                    if (isNaN(element.snr))
                        eleSnr = "";
                    else
                        eleSnr = element.snr + " dB";

                    $("#nodesTable tbody").append("<tr><td> " + element.user +
                        "</td><td><a href=\"javascript:toTarget('" + element.id + "')\">" + element.id + "</a>" +
                        "</td><td>" + elePos +
                        "</td><td>" + eleBatt +
                        "</td><td>" + eleSnr +
                        "</td><td>" + eleLh +
                        "</td></tr>")
                });

                vectorSource.addFeatures(iconFeatures);

                if (jsonData.packet.decoded.data.portnum == "TEXT_MESSAGE_APP") {
                    var msgLines = $('#messages').val().split("\n");
                    var rxTime = new Date(jsonData.packet.rxTime * 1000).toLocaleString();
                    var rxMsg = rxTime + " - " + jsonData.nodes[jsonData.packet.fromId].user.longName + " (" + jsonData.packet.fromId + "): " +
                        jsonData.packet.decoded.data.text + "\n";
                    if (rxMsg != msgLines[msgLines.length - 1])
                        $('#messages').val($('#messages').val() + rxMsg);
                }
            };

            ws.onclose = function (evt) {
                $('#statusIcon').removeClass('blue');
                $('#statusIcon').addClass('red');
                writeConsole('Connection closed by server: ' + evt.code + ' ' + evt.reason);
            };
        }

        $(document).ready(function () {
            $('#send').click(function () {
                console.log($('#message').val());
                $('#message').val("");
                return false;
            });
        });
    </script>
</head>

<body>
    <br />
    <div class="container-fluid">
        <div class="row">
            <div class="col-2">
                <div class="card" style="min-height:350px">
                    <div class="card-header">
                        Connected Node
                    </div>
                    <div class="card-body">
                        <table id="myNodeTable" class="table table-bordered table-condensed table-striped">
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="col-6">
                <div class="card" style="min-height:350px">
                    <div class="card-header">
                        Received Nodes
                    </div>
                    <div class="card-body">
                        <table id="nodesTable" class="table table-bordered table-condensed table-striped">
                            <thead>
                                <tr>
                                    <th>User</th>
                                    <th>Id</th>
                                    <th>Position</th>
                                    <th>Battery</th>
                                    <th>SNR</th>
                                    <th>Last Heard</th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="col-4">
                <div id="map" style="width:100%; height:100%; min-height:300px"></div><br />
            </div>
        </div>
        <br>
        <div class="row">
            <div class="col-8">
                <div class="card">
                    <div class="card-header">
                        Received Messages
                    </div>
                    <div class="card-body">
                        <textarea id='messages' style='width: 100%; height:300px'></textarea><br />
                    </div>
                </div>
            </div>
            <div class="col-4">
                <div class="row">
                    <div class="col">
                        <div class="card">
                            <div class="card-header">
                                Connection
                            </div>
                            <div class="card-body">
                                <div id="connectBox" class="flex">
                                    <span class="verticalMiddleAlign">IP:</span><input class="verticalMiddleAlign"
                                        type="text" id="IPaddr" value="localhost">
                                </div>
                                <div id="connectBox" class="flex">
                                    <span class="verticalMiddleAlign">PORT:</span><input class="verticalMiddleAlign"
                                        type="text" id="srvPort" value="9000">
                                    <button class="verticalMiddleAlign" onclick='connectWS();'>Connect</button>
                                    <div id="statusIcon" class="verticalMiddleAlign circle red"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <br>
                <div class="row">
                    <div class="col">
                        <div class="card">
                            <div class="card-header">
                                Send Message
                            </div>
                            <div class="card-body">
                                <div class="flex">
                                    <span class="verticalMiddleAlign">To: </span>
                                    <input class="verticalMiddleAlign" style="width: 100%;" type="text" id="toMsg">
                                    <button class="verticalMiddleAlign" style="min-width: 100px" onclick='toAll()'>To
                                        All</button>
                                </div>
                                <div class="flex">
                                    <span class="verticalMiddleAlign">Message: </span>
                                    <input class="verticalMiddleAlign" style="width: 100%;" type="text" id="msg2Send">
                                    <button class="verticalMiddleAlign" style="min-width: 100px"
                                        onclick=''>Send</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <br>
        <div class="row">
            <div class="col">
                <div class="card">
                    <div class="card-header">
                        Console
                    </div>
                    <div class="card-body">
                        <textarea id='console' style='width: 100%; height:150px'></textarea><br />
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-b5kHyXgcpbZJO/tY9Ul7kGkf1S0CWuKcCD38l8YkeH8z8QjE0GmW1gYU5S9FOnJ0"
        crossorigin="anonymous"></script>
    <script> mapInit(); </script>
</body>

</html>