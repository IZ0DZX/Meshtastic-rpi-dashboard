<html>

<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="./ol.css" type="text/css">

    <script type='application/javascript'
        src='https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js'></script>
    <script type='application/javascript' src="./ol.js"></script>
    <script type='application/javascript'>
        websocket = 'ws://127.0.0.1:9000/ws';

        var jsonData;
        var nodeList = [];

        var lat = 45.07;
        var lon = 7.51;
        var z = 10;

        var icon = "http://www.openstreetmap.org/openlayers/img/marker.png";
        var iconFeatures = [];
        var vectorSource = new ol.source.Vector({
            features: iconFeatures //add an array of features
        });

        var iconStyle = new ol.style.Style({
            image: new ol.style.Icon(/** @type {olx.style.IconOptions} */({
                anchor: [0.5, 46],
                anchorXUnits: 'fraction',
                anchorYUnits: 'pixels',
                opacity: 0.95,
                src: icon
            })),
            text: new ol.style.Text({
                text: 'the label',
                fill: new ol.style.Fill({ color: 'black' }),
                stroke: new ol.style.Stroke({ color: 'yellow', width: 1 }),
                offsetX: -20,
                offsetY: 20
            })
        });

        var vectorLayer = new ol.layer.Vector({
            source: vectorSource,
            style: iconStyle
        });


        function addMarker(lon, lat, icon, txt) {
            var iconGeometry = new ol.geom.Point(ol.proj.transform([lon, lat], 'EPSG:4326', 'EPSG:3857'));
            var iconFeature = new ol.Feature({
                geometry: iconGeometry,
                name: txt
            });

            iconFeatures.push(iconFeature);
        }

        function mapInit() {
            var map = new ol.Map({
                target: 'map',
                layers: [
                    new ol.layer.Tile({
                        source: new ol.source.OSM()
                    })
                ],
                view: new ol.View({
                    center: ol.proj.fromLonLat([lon, lat]),
                    zoom: z
                })
            });
            map.addLayer(vectorLayer);
        }

        function writeConsole(txt) {
            $('#console').val($('#console').val() + txt + '\\n');
            $('#console').scrollTop($('#console')[0].scrollHeight);
        }

        function connectWS() {
            websocket = 'ws://' + $('#IPaddr').val() + ':' + $('#srvPort').val() + '/ws';
            if (window.WebSocket) {
                ws = new WebSocket(websocket);
            }
            else if (window.MozWebSocket) {
                ws = MozWebSocket(websocket);
            }
            else {
                console.log('WebSocket Not Supported');
                return;
            }
            ws.binaryType = "arraybuffer";


            ws.onopen = function () {
                console.log("Connected!");
                ws.send("We ci sono!")
                isopen = true;
            }

            ws.onmessage = function (evt) {
                writeConsole(evt.data);
                jsonData = JSON.parse(evt.data)


                nodeList = [];
                for (let [key, value] of Object.entries(jsonData.nodes)) {
                    nodeList.push({
                        "id": key,
                        "user": value.user.longName,
                        "pos": {
                            "lat": parseFloat(value.position.latitude).toFixed(4),
                            "lon": parseFloat(value.position.longitude).toFixed(4),
                            "alt": parseInt(value.position.altitude)
                        },
                        "batt": parseInt(value.position.batteryLevel),
                        "lh": value.position.time
                    });
                }


                nodeList.sort((a, b) => {
                    // two undefined values should be treated as equal ( 0 )
                    if (typeof a.lh === 'undefined' && typeof b.lh === 'undefined')
                        return 0;
                    // if a is undefined and b isn't a should have a lower index in the array
                    else if (typeof a.lh === 'undefined')
                        return 1;
                    // if b is undefined and a isn't a should have a higher index in the array
                    else if (typeof b.lh === 'undefined')
                        return -1;
                    // if both lhs are defined compare as normal
                    else
                        return b.lh - a.lh;
                });

                //Nodes Table
                $('#nodes').val("");
                iconFeatures = []
                vectorSource.clear()
                $("#nodesTable tbody").empty();
                nodeList.forEach(element => {
                    var elePos = "";
                    var eleBatt = "";
                    var eleLh = "";
                    if (!isNaN(element.lh))
                        eleLh = new Date(element.lh * 1000).toLocaleString();
                    else
                        eleLh = "---";

                    if (isNaN(element.pos.lat)) {
                        elePos = "---";
                    }
                    else {
                        elePos = element.pos.lat + "°, " + element.pos.lon + "°, " + element.pos.alt + " m";
                        var createIcon = addMarker(element.pos.lon, element.pos.lat, icon, element.user);
                        //markerObj[element.id] = 
                    }

                    if (isNaN(element.batt))
                        eleBatt = "---";
                    else
                        eleBatt = element.batt + "&#37;";

                    $("#nodesTable tbody").append("<tr><td>" + element.id +
                        "</td><td>" + element.user +
                        "</td><td>" + elePos +
                        "</td><td>" + eleBatt +
                        "</td><td>" +
                        "</td><td>" + eleLh +
                        "</td></tr>")
                });

                vectorSource.addFeatures(iconFeatures);
                if (jsonData.packet.decoded.data.portnum == "TEXT_MESSAGE_APP") {
                    $('#messages').val($('#messages').val() + jsonData.packet.fromId + ": " + jsonData.packet.decoded.data.text + '\\n');
                }

            };
            //ws.onopen = function() {
            //   ws.send('{"asd":"lol"}');
            //};
            ws.onclose = function (evt) {
                writeConsole('Connection closed by server: ' + evt.code + ' ' + evt.reason);
            };
        }

        $(document).ready(function () {
            mapInit();



            $('#send').click(function () {
                console.log($('#message').val());
                $('#message').val("");
                return false;
            });
        });
    </script>
</head>

<body>
    <table id="nodesTable" class="table table-bordered table-condensed table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>User</th>
                <th>Position</th>
                <th>Battery</th>
                <th>SNR</th>
                <th>Last Heard</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
    <div id="map" style="width:100%%; height:400px"></div>
    <textarea id='console' style='width: 100%; heigth:400px'></textarea><br/>
    
    <input type="text" id="IPaddr">
    <input type="text" id="srvPort">
    <button onclick='connectWS();'>Send Text Message</button>

</body>

</html>